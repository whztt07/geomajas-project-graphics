<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2015 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the Apache
  ~ License, Version 2.0. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-introduction">
  <title>Introduction</title>

  <para>The Geomajas graphics Project is a stand-alone project under the
  Geomajas banner.</para>

  <section>
    <title>Purpose</title>

    <para>The Geomajas Graphics project will provide drawing capabilities
    (SVG, VML) in support of advanced client side redlining, annotation or
    mark-ups. Basic use cases are dragging, resizing, labeling, styling and
    CRUD. The idea is to create a graphics library that does not necessarily
    depend on the Geomajas client, but draws directly into SVG or VML. By
    doing so we could create a general purpose graphics library that might be
    useful outside Geomajas or even the GIS world as well. The project will
    therefore not depend on any a priori geographical constructs like
    coordinate spaces or transformations. In Geomajas speak, the project
    focusses on annotating objects in screen space, not in world space
    (although the latter will emerge from world referencing the screen
    objects, but this is considered a separate stage).</para>

    <para>The idea is to support different types of annotations and
    interaction mechanisms, some of which are:</para>

    <itemizedlist>
      <listitem>
        <para>graphical objects of varying nature, primarily based on what is
        available in SVG: points/markers, rectangles, ellipses, paths, lines,
        polygons, images, text</para>
      </listitem>

      <listitem>
        <para>object attributes like color, font, line style, opacity</para>
      </listitem>

      <listitem>
        <para>associations of text with objects, also known as labeling</para>
      </listitem>

      <listitem>
        <para>specific objects like notes, callouts, popups</para>
      </listitem>

      <listitem>
        <para>basic operations like adding, deleting, dragging, resizing,
        moving back/front</para>
      </listitem>

      <listitem>
        <para>advanced operations like styling, coordinate-by-coordinate
        editing, uploading images, grouping</para>
      </listitem>
    </itemizedlist>

    <para>The goal is to achieve the equivalent of typical drawing
    applications like PowerPoint or OpenOffice Draw, etc... but with a focus
    on annotating other objects (think geographical features or
    imagery).</para>
  </section>

  <section>
    <title>General functions of the project</title>

    <para>The current version of the project supports the following object types:</para>

    <itemizedlist>
      <listitem>
        <para>Rectangle</para>
      </listitem>

      <listitem>
        <para>Ellipse (including circles)</para>
      </listitem>

      <listitem>
        <para>Image</para>
      </listitem>

      <listitem>
        <para>Path</para>
      </listitem>
    </itemizedlist>

    <para>The following operations are available:</para>

    <itemizedlist>
      <listitem>
        <para>Initial object creation</para>
      </listitem>

      <listitem>
        <para>Dragging/resizing</para>
      </listitem>

      <listitem>
        <para>Labeling</para>
      </listitem>

      <listitem>
        <para>Deleting</para>
      </listitem>

      <listitem>
        <para>Undo/redo</para>
      </listitem>

      <listitem>
        <para>Moving objects back and front</para>
      </listitem>

      <listitem>
        <para>Object selection</para>
      </listitem>

      <listitem>
        <para>Object selection</para>
      </listitem>

      <listitem>
        <para>Object persistence: preferably standards, through SVG</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Basic concepts and architecture</title>

	<section>
		<title>Graphics Objects and roles</title>

		<para>A <code>GraphicsObject</code> is an object that can be rendered in a
		<code>GraphicsObjectContainer</code>; it extends the <code>Renderable</code> interface.
			The container supports
		addition/removal and update of objects and sends out events on the
		<code>EventBus</code> for each of these operations. The
		GraphicsObjectContainer wraps the "physical"
		<code>VectorObjectContainer</code> that implements the rendering of the
		objects in SVG or VML.</para>

		<para>A <code>GraphicsObject</code> supports different types of roles,
		depending on the context and the operation that the object is subjected
		to. The following roles can be distinguished: <code>Draggable</code>,
		<code>Resizable</code>, <code>Fillable</code>, <code>Strokable</code>,
		<code>Labeled</code> and so on. The project contains a number of <code>GraphicsObject</code> implementations.
			Some basic objects extend <code>BaseGraphicsObject</code>:
			<code>BaseCircle</code>, <code>BaseText</code>,
		<code>BaseRectangle</code>, etc...</para>
			<para>More complex objects can be created by combining basic ones. The project
			provides <code>UpdateableGroupGraphicsObject</code>, that groups <code>GraphicsObject</code>s that have an
			<code>Updateable</code> interface. Changes in one of the group members will trigger the update function
				in all group members, keeping the group members coordinated. More about this in the how-to section.</para>

	</section>

	<section>
		<title>Controllers and Services</title>

		<para>A <code>GraphicsController</code> is responsible for
		interpreting user events and converting them into operations that will
		eventually be applied to the graphics objects by the
		<code>GraphicsService</code> (see further). The controller has access to
		the <code>VectorObjectContainer</code> to render helper objects like
		handlers (for resizing), drag lines (while creating a path) or drag masks
		(while dragging) and can register for whatever mouse events or key events
		it is interested in. Possible <code>GraphicsController</code>
		implementations are <code>DragController</code>, <code>ResizeController</code>,
		<code>DeleteController</code>, etc...Controllers act on one object
		only (controller-per-instance or a single controller for all instances
		with varying object scope) and can be activated and deactivated.</para>

		<para>Activation of the controllers is performed by a <code>MetaController</code> a
		single-selection meta-controller that activates all controllers of an object at once when the object is
			selected by clicking on it. Note that all controllers that act on a
		single object should be able to coexist. This implies that controllers do
		not register for all <code>VectorObjectContainer</code> events but instead
		delegate their work to specific helper objects like resize handlers, drag
		masks or special icons (e.g. to activate a specific editor).
			These helper objects are able to define specific actions on an object.</para>

		<para>Actions on objects are defined as a <code>GraphicsOperation</code> instance, like
		<code>DragOperation</code>, <code>ResizeOperation</code>, <code>AddOperation</code>.
			A <code>GraphicsOperation</code> is undoable and redoable by keeping sufficient information to restore the
			object state to what it was before the operation.</para>

		<para>All functions on a <code>GraphicsObjectContainer</code> are managed by a <code>GraphicsService</code>.
			The <code>GraphicsService</code> is the central configuration object of the graphics perfomances:
		</para>

			<itemizedlist>
				<listitem>
					<para>registering the <code>GraphicsController</code>s that
						should created on addeding a <code>GraphicObject</code> to the container (by registering their factories).</para>
				</listitem>

				<listitem>
					<para>containing the <code>MetaController</code> instance;
						this instance can be customized when another strategy than the one described above is desired.</para>
				</listitem>

				<listitem>
					<para>executing <code>GraphicsOperation</code>s.</para>
				</listitem>

				<listitem>
					<para>general configuration via boolean parameters.
						E.g. whether or not to show a duplicate of an object at the original position while dragging an object.</para>
				</listitem>
			</itemizedlist>
	</section>
	</section>
</chapter>
